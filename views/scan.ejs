<style>
    html, body {
      height: 100%;
      margin-top: -50px;
      overflow: hidden;
    }
  </style>
  
  <div style="display: flex; height: 100vh;">
    <%- include('layouts/nav') %>
  
    <main class="flex-grow-1 d-flex flex-column" style="padding: 0;">
      
      <!-- Header tetap di atas -->
      <%- include('layouts/header-main') %>
  
      <!-- Konten utama di tengah dengan grow dan flex -->
      <div class="desktop-only d-flex flex-grow-1 justify-content-center align-items-center" style="margin-top: -40px;">
        <div class="w-100" style="max-width: 1000px;">
          <h3 class="text-center mb-4">Scan Kehadiran Siswa</h3>
  
          <div class="d-flex flex-column flex-md-row gap-4 align-items-center justify-content-center">
            <!-- Kamera -->
            <div class="flex-fill" style="max-width: 480px;">
              <label class="form-label">Kamera:</label>
              <div class="border rounded p-2" style="position: relative;">
                <video id="video" autoplay playsinline width="100%" style="border-radius: 10px;"></video>
                <!-- Overlay crosshair -->
                <div id="crosshair-overlay"
                  style="
                    position: absolute;
                    left: 50%; top: 50%;
                    width: 230px; height: 250px;
                    transform: translate(-50%, -50%);
                    pointer-events: none;
                    z-index: 10;
                    display: flex; align-items: center; justify-content: center;
                  ">
                  <svg width="230" height="250" style="display:block;">
                    <!-- Horizontal line -->
                    <line x1="0" y1="125" x2="230" y2="125" stroke="#ff0000" stroke-width="2" stroke-dasharray="8,8"/>
                    <!-- Vertical line -->
                    <line x1="115" y1="0" x2="115" y2="250" stroke="#ff0000" stroke-width="2" stroke-dasharray="8,8"/>
                  </svg>
                </div>
              </div>
            </div>
  
            <!-- Opsi Sesi -->
            <div class="flex-fill" style="max-width: 400px;">
              <label class="form-label">Sesi Aktif:</label>
              <div id="sessionContainer" class="border rounded p-2 d-flex flex-column align-items-center justify-content-center" style="height: 120px; overflow: hidden; position: relative;">
                <div id="sessionDisplay" class="text-center" style="font-size: 1.1rem; font-weight: bold; min-height: 2em;">Memuat sesi...</div>
              </div>
              <small class="text-muted d-block text-center mt-2">Tekan <b>Spasi</b> untuk menampilkan sesi berikutnya</small>
            </div>
          </div>
  
          <div class="alert alert-success mt-4 text-center" role="alert" style="display:none;" id="successAlert">
            âœ… Berhasil mengambil kehadiran <span id="namaSiswa">{nama siswa}</span> pada sesi <span id="namaSesi">{sesi aktif}</span>!
          </div>
        </div>
      </div>

      <!-- Tampil hanya di mobile -->
      <div class="mobile-only text-center flex-grow-1 d-flex flex-column justify-content-center align-items-center">
        <img src="img/desktop-logo.png" alt="Logo Desktop" style="max-width: 200px; margin-bottom: 1rem;">
        <p class="text-muted">ðŸ“± Gunakan tampilan desktop untuk melakukan scan kehadiran siswa.</p>
      </div>      
    </main>
  </div>  
  
  <script>
  // Kamera 480p
  const video = document.getElementById('video');
  let stream = null;
  navigator.mediaDevices.getUserMedia({ video: { width: 480, height: 360 }, audio: false })
    .then(s => {
      stream = s;
      video.srcObject = stream;
    })
    .catch(err => {
      console.error('Gagal mengakses kamera:', err);
      alert('Tidak bisa mengakses kamera. Pastikan Anda memberi izin!');
    });

  // Sesi mekanisme baru
  const sessionDisplay = document.getElementById('sessionDisplay');
  let currentSession = null;

  async function fetchSession(next = false) {
    let lastAsId = sessionStorage.getItem('lastAsId');
    let url = '/api/nextSession';
    if (next && lastAsId) {
      url += '?after=' + encodeURIComponent(lastAsId);
    }
    try {
      const res = await fetch(url);
      const data = await res.json();
      if (data && data.session) {
        currentSession = data.session;
        sessionStorage.setItem('lastAsId', currentSession.as_id);
        sessionDisplay.textContent = `${currentSession.as_name} (${data.sisa})`;
      } else {
        sessionDisplay.textContent = 'Tidak ada sesi aktif';
        sessionStorage.removeItem('lastAsId');
      }
    } catch (e) {
      sessionDisplay.textContent = 'Gagal mengambil sesi';
    }
  }

  window.addEventListener('DOMContentLoaded', () => {
    sessionStorage.removeItem('lastAsId');
    fetchSession();
  });

  document.addEventListener('keydown', (e) => {
    if (e.code === 'Space') {
      e.preventDefault();
      fetchSession(true);
    }
  });

  // --- WebSocket untuk menerima UID RFID ---
  let ws;
  function setupWS() {
    ws = new WebSocket(`ws://${window.location.host}`);
    ws.onmessage = async (event) => {
      try {
        const data = JSON.parse(event.data);
        if (data.uid) {
          await handleRFIDScan(data.uid, data.pos || '');
        }
      } catch (e) {}
    };
    ws.onclose = () => setTimeout(setupWS, 2000);
  }
  setupWS();

  // --- Ambil foto dari kamera dan upload ---
  async function captureAndUploadPhoto() {
    if (!stream) throw new Error('Kamera belum siap');
    const track = stream.getVideoTracks()[0];
    let blob;
    // Gunakan ImageCapture jika tersedia, fallback ke canvas jika tidak
    if ('ImageCapture' in window) {
      try {
        const imageCapture = new ImageCapture(track);
        blob = await imageCapture.takePhoto();
      } catch {
        blob = null;
      }
    }
    if (!blob) {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
      blob = await new Promise(res => canvas.toBlob(res, 'image/jpeg', 0.9));
    }
    const formData = new FormData();
    formData.append('photo', blob, 'photo.jpg');
    // upload ke backend, dapatkan nama file
    const res = await fetch('/api/uploadAttendancePhoto', { method: 'POST', body: formData });
    const json = await res.json();
    if (!json.success) throw new Error('Gagal upload foto');
    return json.filename;
  }

  // --- Proses absensi ---
  async function handleRFIDScan(uid, pos) {
    if (!currentSession || !currentSession.as_id) {
      showAlert('Tidak ada sesi aktif.', false);
      return;
    }
    showAlert('Memproses absensi...', true, true);
    try {
      // 1. Cari siswa
      const resSiswa = await fetch(`/api/findStudentByRFID?rfid=${encodeURIComponent(uid)}`);
      const siswa = await resSiswa.json();
      if (!siswa || !siswa.student_id) {
        showAlert('Siswa dengan kartu ini tidak ditemukan.', false);
        return;
      }

      // 2. Cek apakah sudah absen di sesi ini
      const checkRes = await fetch(`/api/checkAttendance?student_id=${siswa.student_id}&as_id=${currentSession.as_id}`);
      const checkData = await checkRes.json();
      if (checkData && checkData.already) {
        showAlert(`<b>${siswa.student_name}</b> telah melakukan absensi di <b>${currentSession.as_name}</b>`, false);
        return;
      }

      // 3. Ambil foto & upload
      const photoFilename = await captureAndUploadPhoto();
      // 4. Input absensi
      const resAbsen = await fetch('/api/submitAttendance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          student_id: siswa.student_id,
          as_id: currentSession.as_id,
          photo: photoFilename,
          pos: pos || ''
        })
      });
      const absenResult = await resAbsen.json();
      if (absenResult.success) {
        showAlert(`âœ… Berhasil mengambil kehadiran <b>${siswa.student_name}</b> pada sesi <b>${currentSession.as_name}</b>!`, true);
      } else {
        showAlert(absenResult.message || 'Gagal input absensi.', false);
      }
    } catch (e) {
      showAlert('Terjadi kesalahan saat absensi.', false);
    }
  }

  // --- Alert Bootstrap ---
  function showAlert(msg, success = true, loading = false) {
    const alert = document.getElementById('successAlert');
    alert.classList.remove('alert-success', 'alert-danger');
    alert.classList.add(success ? 'alert-success' : 'alert-danger');
    alert.innerHTML = loading ? `<span class="spinner-border spinner-border-sm"></span> ${msg}` : msg;
    alert.style.display = 'block';
    if (!loading) setTimeout(() => { alert.style.display = 'none'; }, 3500);
  }
  </script>
  
  <style>
    #sessionList {
      /* tidak dipakai lagi */
      display: none;
    }
    .session-item {
      /* tidak dipakai lagi */
      display: none;
    }
    @media (max-width: 768px) {
      .flex-md-row {
        flex-direction: column !important;
      }
    }
  </style>
  <style>
    /* Sembunyikan default */
    .mobile-only {
      display: none !important;
    }
  
    /* Tampilkan/hilangkan sesuai media query */
    @media (max-width: 768px) {
      .desktop-only {
        display: none !important;
      }
  
      .mobile-only {
        display: flex !important;
      }
    }
  </style>
  
  <style>
    #successAlert {
      position: fixed;
      top: 32px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 2000;
      min-width: 320px;
      max-width: 90vw;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
      pointer-events: none;
    }
  </style>
  
  <script>
    window.addEventListener('load', () => {
      const header = document.querySelector('header'); // pastikan tag header ada
      const main = document.getElementById('mainContent');
      if (header && main) {
        const height = header.offsetHeight;
        main.style.marginTop = `-${height / 2}px`;
      }
    });
  </script>
